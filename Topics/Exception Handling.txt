Exception Handling:
Errors:
	Errors are the problems in a program due to which the program will stop the execution.
	Error in Python can be of two types i.e. Syntax errors and Exceptions. 
Syntax Error: 
	Syntax error is caused by the wrong syntax in the code. It leads to the termination of the program. 
Exceptions: 
	Exceptions are raised when the program is syntactically correct, but the code resulted in an error. 
	This error does not stop the execution of the program, however, it changes the normal flow of the program.
try : 
	try is used to catch the errors in the code  
		Code in “try” block is checked, if there is any type of error, except block is executed.
except : 
	As explained above, this works together with “try” to catch exceptions.

Try and Except Statement – Catching Exceptions:
	Try and except statements are used to catch and handle exceptions in Python. Statements that can raise exceptions are kept inside the try clause 
	and the statements that handle the exception are written inside except clause.
	
	try:
    		# statement(s)
	except IndexError:
    		# statement(s)
	except ValueError:
    		# statement(s)
else:
	The code enters the else block only if the try clause does not raise an exception.

Finally Keyword in Python:
	Python provides a keyword finally, which is always executed after the try and except blocks. The final block always executes 
	after normal termination of try block or after try block terminates due to some exception.

	Syntax:

	try:
    		# Some Code.... 

	except:
    		# optional block
    		# Handling of exception (if required)

	else:
    		# execute if no exception

	finally:
    		# Some code .....(always executed)

Some of the common Exception Errors are :

	IOError: if the file can’t be opened
	KeyboardInterrupt: when an unrequired key is pressed by the user
	ValueError: when built-in function receives a wrong argument
	EOFError: if End-Of-File is hit without reading any data
	ImportError: if it is unable to find the module




Notes by Teja:

Buitin exceptions
_________________________________________________________________________________________________________________________
Error: when we saw errors in compile time
Eg: syntax, not refered object, name error, unspecified indentation error

Exception:  when we saw errors in run time(after executing)
eg:keyerror, valueerror, indexerror, type error

We have 3 blocks/stages/phases in exception handling

1.try = When we suspect our code has code issues then we will write them in try block
2.except = when we face issues in try block then exception block will be called, if not it will reached.
3.finally = irrespective error or not this block will called.; cleanup activity block.

Advantages:
1. Exception block will only trigger when we have issues with try block so non-error scenarios will not have impact.
2. We can continue to run even after exception

try must , except must, finally optional

_______________________________________________________________________________________________________________________

Parent exception:

super class of all exceptions

Eg: Exception

Child exception:

sub class of parent exception

Eg: NameError, IndexError, ZeroDivisionError

=> Every exception in inbuilt
________________________________________________________________________________________________________________________

try:
   try statements
except child_exception_1 as e:
    exception-1 statements
except child_exception_2 as e:
    exception-2 statements
except parent_exception:
    parent statements


AT ANY POINT OF TIME, IRRESPECTIVE OF NUMBER OF CHILD EXCEPTIONS AND ONE PARENT EXCEPTION, ONLY ONE EXCEPTION WILL CALLED.
___________________________________________________________________________________________________________________________
try , CE 1, CE2, CE3, PE, else, finally
CE2:
try, CE2, finally


try , CE 1, CE2, CE3, PE, else, finally
no error:
try, else, finally

try , CE 1, CE2, CE3, PE, else, finally
CE3:
try, CE3, finally


try , CE 1, CE2, CE3, PE, else, finally
not able to find exception:
try, PE, finally


=> else and except are mutually exclusive.
Eg: head and Tails
_____________________________________________________________________________________________________________________________

Customized exceptions(raise)

