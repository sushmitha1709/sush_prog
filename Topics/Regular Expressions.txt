Regular Expressions:
	A regex is a special sequence of characters that defines a pattern for complex string-matching functionality.
	A regular expression is a powerful tool for matching text, based on a pre-defined pattern. It can detect the presence or absence of 
	a text by matching with a particular pattern, and also can split a pattern into one or more sub-patterns. The Python standard library 
	provides a re module for regular expressions. Its primary function is to offer a search, where it takes a regular expression and a string.
	Here, it either returns the first match or else none.

	why we should use Regular expression?
	Data Mining, Data Validation
	Regular expression is the best tool for data mining. It efficiently identifies a text with a pre-defined pattern. 
	Some common scenarios are identifying an email, URL, or phone from a pile of text.
	Regular expression can perfectly validate data by defining different sets of patterns.
	 A few examples are validating phone numbers, emails, etc.
	

	^ --> It matches Begining of string
	\ --> It is used to escape metacharacters
	* --> It matches 0 or more Characters left to it(*)
	+ --> It matches 1 or more Characters left to it(+)
	? --> It matches 0 or 1 Character left to it(?)
	[] --> It matches Characters in brackets
	{m, n} --> It matches range of numbers(Minimum, Maximum)
	{m} --> It matches exact number
	() --> Group
	. --> It matches any character except new line
	| --> It matches either or
	$ --> It matches ending of string
------------------------------------------------------------------
	\A --> It matches Begining of string
	\b --> It matches word boundary with in a string
	\B --> It matches not a word boundary
	\d --> It matches only digits
	\D --> It matches only non digits
	\s --> It matches white space(space, tab, newline)
	\S --> It matches not white space
	\w --> It matches word character(Alpha numeric characters) ie..[a-zA-Z0-9_]
	\W --> It matches not a word character(Non Alpha numeric characters) ie..[^a-zA-Z0-9_]
	\Z --> It matches ending of string


Pan Number Pattern:
	
	Conditions:
	# It should have ten characters long
	# The first five characters should be any upper case alphabets
	# the next four characters should be any number from 0 to 9
	# the last character should be any uppercase character
	# it should not contain any white space and special characters
	#Example:BQHPP0323H, BPZPP4016A

	pan_number_pattern = r"[A-Z]{5}\d{4}[A-Z]$"