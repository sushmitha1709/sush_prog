Break Statement:
	it is a loop control or jump control statement
	we want to jump out of the loop simply using break statement OR 
	break statement is used to terminate the loop and executes the next statement outside the loop.
	The break statement can be used in both while and for loops.
	
Continue:
	Continue is also a loop control statement just like the break statement. continue statement is 
	opposite to break statement, instead of terminating the loop, it forces to execute the next iteration of the loop.
Pass:
	The pass statement in Python is used when a statement is required syntactically but we don't want any 
	command or code to execute. It is like null operation, as nothing will happen is it is executed. 
	Pass statement can also be used for writing empty loops. Pass is also used for empty control statement, function and classes.
*args:
	*args is uesd to pass multiple arguments to a function.
	Datatype of args is tuple. (OR)
	If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.
	This way the function will receive a tuple of arguments, and can access the items accordingly:
**kwargs:
	**kwargs works just like *args, but instead of accepting positional arguments it accepts keyword (or named) arguments.
	we want to pass keyword arguments, which are basically key-value pairs as arguments to a function.

What is the difference between *ARGs and **kwargs in Python?
	While *args can accept any number of positional arguments, Python **kwargs can accept any number of named arguments. 
	You can use *args and **kwargs in a function definition to accept both positional arguments and named arguments, whose count is unknown.
	
