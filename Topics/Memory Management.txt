Memory management:
	In Python memory allocation and deallocation method is automatic as the Python developers created a garbage collector 
	for Python so that the user does not have to do manual garbage collection.
Garbage Collection:
	Garbage collection is a process in which the interpreter frees up the memory when not in use to make it available for other objects.
Reference Counting:
	Reference counting works by counting the number of times an object is referenced by other objects in the system. 
	When references to an object are removed, the reference count for an object is decremented. When the reference count becomes zero, 
	the object is deallocated.

Memory allocation can be defined as allocating a block of space in the computer memory to a program.

garbage collection - unreferenced data

Python uses the dynamic memory allocation which is managed by the Heap data structure. Memory Heap holds the
 objects and other data structures that will be used in the program. Python memory manager manages the allocation or
de-allocation of the heap memory space through the API functions.

memories in python(Registers/Cache)
______________________________________________________________________________
stack = will save sequence of operations , undo operation
heap = objects and other data structures
program counter = next statement to be executed

There are two parts of memory: 1. stack memory 2. heap memory 
	The methods/method calls and the references are stored in stack memory and all the values objects are stored in a private heap.